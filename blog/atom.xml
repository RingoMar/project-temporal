<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/project-temporal/blog</id>
    <title>Temporal Blog</title>
    <updated>2023-01-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/project-temporal/blog"/>
    <subtitle>Temporal Blog</subtitle>
    <icon>https://github.com/project-temporal/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Overview]]></title>
        <id>Overview</id>
        <link href="https://github.com/project-temporal/blog/Overview"/>
        <updated>2023-01-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The temporal lobe of the brain is responsible for a number of important functions, including hearing, language processing, and memory. One of the key regions within the temporal lobe is the superior temporal gyrus, which is involved in the perception of speech and the recognition of different sounds. Another important region is the hippocampus, which plays a critical role in the formation and retrieval of long-term memories.]]></summary>
        <content type="html"><![CDATA[<p>The temporal lobe of the brain is responsible for a number of important functions, including hearing, language processing, and memory. One of the key regions within the temporal lobe is the superior temporal gyrus, which is involved in the perception of speech and the recognition of different sounds. Another important region is the hippocampus, which plays a critical role in the formation and retrieval of long-term memories.</p><p><img loading="lazy" alt="temporal-brain" src="/project-temporal/assets/images/Temporal-lobe-anatomy-functions-and-characteristics-d355a72cdb5b86cb846896eb5f28fb9a.jpeg" width="1200" height="630" class="img_ev3q"></p><p>In recent years, researchers have been working to recreate the functions of the temporal lobe in modern AI systems, particularly in the development of chatbots. One approach is to use machine learning algorithms to train chatbots to recognize and respond to different sounds and speech patterns, much like the superior temporal gyrus does in the human brain. Another approach is to use neural networks to simulate the process of memory formation and retrieval, allowing chatbots to "remember" past interactions and use that information to respond more intelligently to new inputs.</p><p>There are a lot of challenges in recreating temporal lobe functions in chat bots, such as the lack of data and computational resources and the complexity of the human brain. However, with the recent advancements in AI, especially the natural language processing and deep learning, chat bots are becoming more and more sophisticated in terms of understanding and generating human-like language, and also in terms of memory and context handling.</p><p>Overall, the temporal lobe plays a vital role in human cognition and researchers are working to replicate its functions in modern AI systems to make chat bots more natural and intuitive in their interactions with humans.</p><h1>The benifits of Temporal Project</h1><p>Using OpenAI's Whisper to listen to Twitch streams could be revolutionary in the field of Twitch bots. Whisper is a natural language model that can understand and generate human-like speech, allowing Twitch bots to understand and respond to the voice chat in real-time. </p><p>This could enable Twitch bots to perform a variety of tasks such as moderating, providing information about the game, and even interacting with viewers in a more natural way. This could provide valuable insights for streamers and help them improve their content and engage with their audience more effectively. </p><p>All in all, the use of OpenAI's Whisper to listen to Twitch streams and advance Twitch bots has the potential to revolutionize the way Twitch is experienced by both streamers and viewers.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is Whisper]]></title>
        <id>about-whisper</id>
        <link href="https://github.com/project-temporal/blog/about-whisper"/>
        <updated>2023-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[OpenAI's Whisper is a cutting-edge natural language model that allows developers to understand and generate human-like speech. It is based on a transformer architecture and pre-trained on a massive amount of data, making it one of the most advanced models for natural language processing.]]></summary>
        <content type="html"><![CDATA[<p>OpenAI's Whisper is a cutting-edge natural language model that allows developers to understand and generate human-like speech. It is based on a transformer architecture and pre-trained on a massive amount of data, making it one of the most advanced models for natural language processing.</p><p><img loading="lazy" src="https://raw.githubusercontent.com/openai/whisper/main/approach.png" alt="How Data works" class="img_ev3q"></p><p>One of the key benefits of using OpenAI's Whisper is its ability to understand and generate a wide range of human speech, including different accents and dialects. This makes it a powerful tool for a variety of applications, such as chatbots, voice assistants, and transcription services.</p><p>Another major benefit of using Whisper is its ability to handle a large amount of data and generate high-quality text. Whisper is pre-trained on a massive amount of data, which allows it to generate coherent and fluent text, even when given a small amount of input. This makes it a powerful tool for natural language generation tasks, such as summarization, question answering and language translation.</p><p>Additionally, Whisper can be easily integrated into a wide range of applications and platforms, making it a versatile tool for developers. OpenAI's API allows developers to access Whisper's capabilities with minimal setup, enabling them to focus on building their applications rather than training and maintaining their own models.</p><p>In contrast, developing a natural language model from scratch can be a daunting task, requiring significant resources in terms of data, computing power, and expertise. By using OpenAI's Whisper, developers can save time and money while still having access to state-of-the-art natural language processing capabilities.</p><p>In summary, OpenAI's Whisper is a powerful and versatile natural language model that can be used to understand and generate human-like speech. It has several benefits, such as the ability to handle a large amount of data, generating high-quality text, and easy integration into a wide range of applications and platforms. Using OpenAI's Whisper rather than developing a natural language model from scratch can save time and money while still having access to state-of-the-art natural language processing capabilities.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Project Potential]]></title>
        <id>Project Potential</id>
        <link href="https://github.com/project-temporal/blog/Project Potential"/>
        <updated>2023-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Project Temporal is a research project aimed at developing new techniques for dealing with twitch bots and audio. Some possible projects that could be built using the research from Project Temporal]]></summary>
        <content type="html"><![CDATA[<p>Project Temporal is a research project aimed at developing new techniques for dealing with twitch bots and audio. Some possible projects that could be built using the research from Project Temporal</p><h1>Chat bot</h1><p>A Twitch bot using audio only commands from the streamer could allow the streamer to control certain aspects of their stream without needing to use their keyboard or mouse. This could be useful for streamers who want to keep their hands free for other tasks, such as playing a game or drawing.</p><p>One possible implementation of this bot would be to use vocal range matching to match the voice of the streamer. This could involve analyzing the streamer's voice in real-time and comparing it to a pre-recorded sample of their voice. If a match is detected, the bot could then execute the corresponding command.</p><p>For example, the streamer could say "start music" or "stop music" to control the background music during the stream. Or "start countdown" to start a countdown timer on the screen.</p><p>Another example could be using different pitch and tone of the streamer's voice to control the volume of the stream or other settings.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="chat-bot-for-people-with-disabilities">Chat bot for people with disabilities<a class="hash-link" href="#chat-bot-for-people-with-disabilities" title="Direct link to heading">â€‹</a></h2><p>A Twitch bot that uses audio only commands can help make the streaming experience more accessible for streamers who may have difficulty using a keyboard or mouse due to a physical disability or other condition. By allowing streamers to control certain aspects of their stream using just their voice, this bot can help to reduce the physical strain of streaming and make it more accessible for a wider range of people.</p><p>For example, the bot could be used to allow the streamer update counters, change the game/title, and other basic controls. This would make the streaming process less cumbersome for streamers who may have difficulty using a keyboard or mouse.</p><p>So, by using an audio-only bot, Twitch streamers with disabilities or conditions that make it difficult to use a keyboard or mouse can still stream and interact with their audience in a more accessible way. Twitch's mission to make the website useable for everyone, that can be further enhanced by this kind of bot, and it could be a great addition to Twitch's current accessibility features.</p><h1>Event Bot</h1><p>A Twitch bot that uses audio only to act on events from a Twitch stream, such as specific words said by the streamer, could be a useful tool for streamers who want to interact with their audience in a more dynamic and engaging way. This could be done by having the bot listen for specific keywords or phrases in the stream's audio and then performing an action based on those keywords.</p><p>Another example could be if the streamer says a specific word or phrase in the stream, the bot could automatically execute a command such as starting a poll, displaying a message on the screen, or triggering a sound effect. This could be used to enhance the overall viewing experience for the audience.</p><p>This kind of bot could be built using a combination of technologies such as speech recognition, natural language processing, and real-time audio processing, found in OpenAi's (Whisper)<!-- -->[https://openai.com/blog/whisper/]</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Samantha Bot]]></title>
        <id>Samantha Bot</id>
        <link href="https://github.com/project-temporal/blog/Samantha Bot"/>
        <updated>2023-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Samantha is a Twitch bot that utilizes research from Project Temporal to monitor audio from a Twitch stream for the use of profanity. It is built using ffmpeg for audio processing, golang for the backend, and python for the interface. The bot counts the number of times the word "fuck" is used in the stream's audio.]]></summary>
        <content type="html"><![CDATA[<p>Samantha is a Twitch bot that utilizes research from Project Temporal to monitor audio from a Twitch stream for the use of profanity. It is built using ffmpeg for audio processing, golang for the backend, and python for the interface. The bot counts the number of times the word "fuck" is used in the stream's audio.</p><h1>what is ffmpeg</h1><p><img loading="lazy" alt="audio-wave" src="/project-temporal/assets/images/futuristic-sound-wave-vector-a8c4c784b3cbb1415473f1744a8d1898.jpg" width="7713" height="5299" class="img_ev3q">
FFmpeg is a free, open-source, command-line software that can be used to record, convert, and stream audio and video. It supports a wide variety of codecs and file formats, and is commonly used for video encoding, decoding, and manipulation.</p><code>ffmpeg -i "https://usher.ttvnw.net/api/channel/hls/..." -vn -c:a aac -b:a 128k -segment_time 10 -f segment audio/output_%03d.aac</code><p>This command tells ffmpeg to take the input from the specified m3u8 URL, to ignore any video (-vn), and to copy the audio codec into 30-second segments, and to save each segment to a separate file using the %03d pattern..</p><h1>How does it get the words?</h1><p>OpenAI's Whisper is a high-quality voice synthesis model that can be used to generate natural-sounding speech. It is based on the Transformer architecture and can be fine-tuned on a specific speaker's voice, making it capable of generating speech in different accents and languages.</p><p>In the context of a project, Whisper can be used to loop through an array of files that are added to a directory. The process would involve first converting the text data in the files to speech using Whisper, and then updating a counter in a local file through a post request. The looping mechanism is implemented using python that continuously monitors the directory for new files and processes them as they are added.</p><p>The time of the segments from the ffmpeg script can be fine used to  allow for real-time conversion of text to speech or just normal processing over time as new files are added to the directory, allowing for automatic processing without human intervention.</p><p>It's worth noting that OpenAI API's including Whisper are not public anymore, you need to apply for access, pay for usage or run stright from the ground up.</p><h1>Golang? Why?</h1><p><img loading="lazy" alt="go bot" src="/project-temporal/assets/images/001-2736037818-3d0bb784c24a4511451f97f652b68290.gif" width="500" height="500" class="img_ev3q">
Go, is a programming language developed by Google that is often used for building backend systems. In the context of this project its a Twitch bot to send updates to the Twitch chat when a specific command is called. Golang is also being used to process API calls to keep track of the counter allowing for max efficiency.</p><p>The Go programming language also provides built-in support for concurrency, which allows multiple tasks to be executed simultaneously. This can be useful in a Twitch bot &amp; the api caller because it allows for the processing of multiple commands or requests at the same time, without slowing down the overall performance of the bot.</p><p>Additionally, Golang is a compiled language which makes it a good choice for performance-sensitive applications, and it also provides good support for cross-compilation, making it easy to deploy the bot on different platforms.</p><p>In summary, Golang is a suitable choice for building the backend of a Twitch bot because it provides robust support for handling network connections, concurrency, and performance-sensitive applications. It's well suited to handle the api calls and updates to the Twitch chat when the command <code>?fbomb</code> is called.</p><h1>Summary</h1><p><img loading="lazy" alt="overview" src="/project-temporal/assets/images/overview-f7302ac51de8473e4844f9df1ab280f6.png" width="771" height="771" class="img_ev3q"></p><p>The project architecture for the Twitch bot that uses OpenAI's Whisper, ffmpeg and golang, includes utilizing Whisper for converting text to speech, ffmpeg for extracting audio from a m3u8 stream and splitting it into 30-second segments, and golang for the backend to process API calls, and sending updates to the Twitch chat when the command <code>?fbomb</code> is called.</p>]]></content>
    </entry>
</feed>