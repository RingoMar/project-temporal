"use strict";(self.webpackChunkproject_temporal=self.webpackChunkproject_temporal||[]).push([[6217],{1026:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/tutorial-basics/congratulations","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/congratulations","source":"@site/blog/tutorial-basics/congratulations.md","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template.","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.46,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":6},"nextItem":{"title":"Create a Blog Post","permalink":"/project-temporal/blog/tutorial-basics/create-a-blog-post"}},"content":"You have just learned the **basics of Docusaurus** and made some changes to the **initial template**.\\n\\nDocusaurus has **much more to offer**!\\n\\nHave **5 more minutes**? Take a look at **[versioning](../tutorial-extras/manage-docs-versions.md)** and **[i18n](../tutorial-extras/translate-your-site.md)**.\\n\\nAnything **unclear** or **buggy** in this tutorial? [Please report it!](https://github.com/facebook/docusaurus/discussions/4610)\\n\\n## What\'s next?\\n\\n- Read the [official documentation](https://docusaurus.io/)\\n- Modify your site configuration with [`docusaurus.config.js`](https://docusaurus.io/docs/api/docusaurus-config)\\n- Add navbar and footer items with [`themeConfig`](https://docusaurus.io/docs/api/themes/configuration)\\n- Add a custom [Design and Layout](https://docusaurus.io/docs/styling-layout)\\n- Add a [search bar](https://docusaurus.io/docs/search)\\n- Find inspirations in the [Docusaurus showcase](https://docusaurus.io/showcase)\\n- Get involved in the [Docusaurus Community](https://docusaurus.io/community/support)"},{"id":"/tutorial-basics/create-a-blog-post","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/create-a-blog-post","source":"@site/blog/tutorial-basics/create-a-blog-post.md","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.475,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":3},"prevItem":{"title":"Congratulations!","permalink":"/project-temporal/blog/tutorial-basics/congratulations"},"nextItem":{"title":"Create a Document","permalink":"/project-temporal/blog/tutorial-basics/create-a-document"}},"content":"Docusaurus creates a **page for each blog post**, but also a **blog index page**, a **tag system**, an **RSS** feed...\\n\\n## Create your first Post\\n\\nCreate a file at `blog/2021-02-28-greetings.md`:\\n\\n```md title=\\"blog/2021-02-28-greetings.md\\"\\n---\\nslug: greetings\\ntitle: Greetings!\\nauthors:\\n  - name: Joel Marcey\\n    title: Co-creator of Docusaurus 1\\n    url: https://github.com/JoelMarcey\\n    image_url: https://github.com/JoelMarcey.png\\n  - name: S\xe9bastien Lorber\\n    title: Docusaurus maintainer\\n    url: https://sebastienlorber.com\\n    image_url: https://github.com/slorber.png\\ntags: [greetings]\\n---\\n\\nCongratulations, you have made your first post!\\n\\nFeel free to play around and edit this post as much you like.\\n```\\n\\nA new blog post is now available at [http://localhost:3000/blog/greetings](http://localhost:3000/blog/greetings)."},{"id":"/tutorial-basics/create-a-document","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/create-a-document","source":"@site/blog/tutorial-basics/create-a-document.md","title":"Create a Document","description":"Documents are groups of pages connected through:","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.59,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":2},"prevItem":{"title":"Create a Blog Post","permalink":"/project-temporal/blog/tutorial-basics/create-a-blog-post"},"nextItem":{"title":"Create a Page","permalink":"/project-temporal/blog/tutorial-basics/create-a-page"}},"content":"Documents are **groups of pages** connected through:\\n\\n- a **sidebar**\\n- **previous/next navigation**\\n- **versioning**\\n\\n## Create your first Doc\\n\\nCreate a Markdown file at `docs/hello.md`:\\n\\n```md title=\\"docs/hello.md\\"\\n# Hello\\n\\nThis is my **first Docusaurus document**!\\n```\\n\\nA new document is now available at [http://localhost:3000/docs/hello](http://localhost:3000/docs/hello).\\n\\n## Configure the Sidebar\\n\\nDocusaurus automatically **creates a sidebar** from the `docs` folder.\\n\\nAdd metadata to customize the sidebar label and position:\\n\\n```md title=\\"docs/hello.md\\" {1-4}\\n---\\nsidebar_label: \'Hi!\'\\nsidebar_position: 3\\n---\\n\\n# Hello\\n\\nThis is my **first Docusaurus document**!\\n```\\n\\nIt is also possible to create your sidebar explicitly in `sidebars.js`:\\n\\n```js title=\\"sidebars.js\\"\\nmodule.exports = {\\n  tutorialSidebar: [\\n    \'intro\',\\n    // highlight-next-line\\n    \'hello\',\\n    {\\n      type: \'category\',\\n      label: \'Tutorial\',\\n      items: [\'tutorial-basics/create-a-document\'],\\n    },\\n  ],\\n};\\n```"},{"id":"/tutorial-basics/create-a-page","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/create-a-page","source":"@site/blog/tutorial-basics/create-a-page.md","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.52,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":1},"prevItem":{"title":"Create a Document","permalink":"/project-temporal/blog/tutorial-basics/create-a-document"},"nextItem":{"title":"Deploy your site","permalink":"/project-temporal/blog/tutorial-basics/deploy-your-site"}},"content":"Add **Markdown or React** files to `src/pages` to create a **standalone page**:\\n\\n- `src/pages/index.js` \u2192 `localhost:3000/`\\n- `src/pages/foo.md` \u2192 `localhost:3000/foo`\\n- `src/pages/foo/bar.js` \u2192 `localhost:3000/foo/bar`\\n\\n## Create your first React Page\\n\\nCreate a file at `src/pages/my-react-page.js`:\\n\\n```jsx title=\\"src/pages/my-react-page.js\\"\\nimport React from \'react\';\\nimport Layout from \'@theme/Layout\';\\n\\nexport default function MyReactPage() {\\n  return (\\n    <Layout>\\n      <h1>My React page</h1>\\n      <p>This is a React page</p>\\n    </Layout>\\n  );\\n}\\n```\\n\\nA new page is now available at [http://localhost:3000/my-react-page](http://localhost:3000/my-react-page).\\n\\n## Create your first Markdown Page\\n\\nCreate a file at `src/pages/my-markdown-page.md`:\\n\\n```mdx title=\\"src/pages/my-markdown-page.md\\"\\n# My Markdown page\\n\\nThis is a Markdown page\\n```\\n\\nA new page is now available at [http://localhost:3000/my-markdown-page](http://localhost:3000/my-markdown-page)."},{"id":"/tutorial-basics/deploy-your-site","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/deploy-your-site","source":"@site/blog/tutorial-basics/deploy-your-site.md","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack).","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.42,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":5},"prevItem":{"title":"Create a Page","permalink":"/project-temporal/blog/tutorial-basics/create-a-page"},"nextItem":{"title":"Markdown Features","permalink":"/project-temporal/blog/tutorial-basics/markdown-features"}},"content":"Docusaurus is a **static-site-generator** (also called **[Jamstack](https://jamstack.org/)**).\\n\\nIt builds your site as simple **static HTML, JavaScript and CSS files**.\\n\\n## Build your site\\n\\nBuild your site **for production**:\\n\\n```bash\\nnpm run build\\n```\\n\\nThe static files are generated in the `build` folder.\\n\\n## Deploy your site\\n\\nTest your production build locally:\\n\\n```bash\\nnpm run serve\\n```\\n\\nThe `build` folder is now served at [http://localhost:3000/](http://localhost:3000/).\\n\\nYou can now deploy the `build` folder **almost anywhere** easily, **for free** or very small cost (read the **[Deployment Guide](https://docusaurus.io/docs/deployment)**)."},{"id":"/tutorial-basics/markdown-features","metadata":{"permalink":"/project-temporal/blog/tutorial-basics/markdown-features","source":"@site/blog/tutorial-basics/markdown-features.mdx","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features.","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":1.645,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":4},"prevItem":{"title":"Deploy your site","permalink":"/project-temporal/blog/tutorial-basics/deploy-your-site"},"nextItem":{"title":"Manage Docs Versions","permalink":"/project-temporal/blog/tutorial-extras/manage-docs-versions"}},"content":"Docusaurus supports **[Markdown](https://daringfireball.net/projects/markdown/syntax)** and a few **additional features**.\\n\\n## Front Matter\\n\\nMarkdown documents have metadata at the top called [Front Matter](https://jekyllrb.com/docs/front-matter/):\\n\\n```text title=\\"my-doc.md\\"\\n// highlight-start\\n---\\nid: my-doc-id\\ntitle: My document title\\ndescription: My document description\\nslug: /my-custom-url\\n---\\n// highlight-end\\n\\n## Markdown heading\\n\\nMarkdown text with [links](./hello.md)\\n```\\n\\n## Links\\n\\nRegular Markdown links are supported, using url paths or relative file paths.\\n\\n```md\\nLet\'s see how to [Create a page](/create-a-page).\\n```\\n\\n```md\\nLet\'s see how to [Create a page](./create-a-page.md).\\n```\\n\\n**Result:** Let\'s see how to [Create a page](./create-a-page.md).\\n\\n## Images\\n\\nRegular Markdown images are supported.\\n\\nYou can use absolute paths to reference images in the static directory (`static/img/docusaurus.png`):\\n\\n```md\\n![Docusaurus logo](/img/docusaurus.png)\\n```\\n\\n![Docusaurus logo](/img/docusaurus.png)\\n\\nYou can reference images relative to the current file as well, as shown in [the extra guides](../tutorial-extras/manage-docs-versions.md).\\n\\n## Code Blocks\\n\\nMarkdown code blocks are supported with Syntax highlighting.\\n\\n    ```jsx title=\\"src/components/HelloDocusaurus.js\\"\\n    function HelloDocusaurus() {\\n        return (\\n            <h1>Hello, Docusaurus!</h1>\\n        )\\n    }\\n    ```\\n\\n```jsx title=\\"src/components/HelloDocusaurus.js\\"\\nfunction HelloDocusaurus() {\\n  return <h1>Hello, Docusaurus!</h1>;\\n}\\n```\\n\\n## Admonitions\\n\\nDocusaurus has a special syntax to create admonitions and callouts:\\n\\n    :::tip My tip\\n\\n    Use this awesome feature option\\n\\n    :::\\n\\n    :::danger Take care\\n\\n    This action is dangerous\\n\\n    :::\\n\\n:::tip My tip\\n\\nUse this awesome feature option\\n\\n:::\\n\\n:::danger Take care\\n\\nThis action is dangerous\\n\\n:::\\n\\n## MDX and React Components\\n\\n[MDX](https://mdxjs.com/) can make your documentation more **interactive** and allows using any **React components inside Markdown**:\\n\\n```jsx\\nexport const Highlight = ({children, color}) => (\\n  <span\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \'20px\',\\n      color: \'#fff\',\\n      padding: \'10px\',\\n      cursor: \'pointer\',\\n    }}\\n    onClick={() => {\\n      alert(`You clicked the color ${color} with label ${children}`)\\n    }}>\\n    {children}\\n  </span>\\n);\\n\\nThis is <Highlight color=\\"#25c2a0\\">Docusaurus green</Highlight> !\\n\\nThis is <Highlight color=\\"#1877F2\\">Facebook blue</Highlight> !\\n```\\n\\nexport const Highlight = ({children, color}) => (\\n  <span\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \'20px\',\\n      color: \'#fff\',\\n      padding: \'10px\',\\n      cursor: \'pointer\',\\n    }}\\n    onClick={() => {\\n      alert(`You clicked the color ${color} with label ${children}`);\\n    }}>\\n    {children}\\n  </span>\\n);\\n\\nThis is <Highlight color=\\"#25c2a0\\">Docusaurus green</Highlight> !\\n\\nThis is <Highlight color=\\"#1877F2\\">Facebook blue</Highlight> !"},{"id":"/tutorial-extras/manage-docs-versions","metadata":{"permalink":"/project-temporal/blog/tutorial-extras/manage-docs-versions","source":"@site/blog/tutorial-extras/manage-docs-versions.md","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs.","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.695,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":1},"prevItem":{"title":"Markdown Features","permalink":"/project-temporal/blog/tutorial-basics/markdown-features"},"nextItem":{"title":"Translate your site","permalink":"/project-temporal/blog/tutorial-extras/translate-your-site"}},"content":"Docusaurus can manage multiple versions of your docs.\\n\\n## Create a docs version\\n\\nRelease a version 1.0 of your project:\\n\\n```bash\\nnpm run docusaurus docs:version 1.0\\n```\\n\\nThe `docs` folder is copied into `versioned_docs/version-1.0` and `versions.json` is created.\\n\\nYour docs now have 2 versions:\\n\\n- `1.0` at `http://localhost:3000/docs/` for the version 1.0 docs\\n- `current` at `http://localhost:3000/docs/next/` for the **upcoming, unreleased docs**\\n\\n## Add a Version Dropdown\\n\\nTo navigate seamlessly across versions, add a version dropdown.\\n\\nModify the `docusaurus.config.js` file:\\n\\n```js title=\\"docusaurus.config.js\\"\\nmodule.exports = {\\n  themeConfig: {\\n    navbar: {\\n      items: [\\n        // highlight-start\\n        {\\n          type: \'docsVersionDropdown\',\\n        },\\n        // highlight-end\\n      ],\\n    },\\n  },\\n};\\n```\\n\\nThe docs version dropdown appears in your navbar:\\n\\n![Docs Version Dropdown](./img/docsVersionDropdown.png)\\n\\n## Update an existing version\\n\\nIt is possible to edit versioned docs in their respective folder:\\n\\n- `versioned_docs/version-1.0/hello.md` updates `http://localhost:3000/docs/hello`\\n- `docs/hello.md` updates `http://localhost:3000/docs/next/hello`"},{"id":"/tutorial-extras/translate-your-site","metadata":{"permalink":"/project-temporal/blog/tutorial-extras/translate-your-site","source":"@site/blog/tutorial-extras/translate-your-site.md","title":"Translate your site","description":"Let\'s translate docs/intro.md to French.","date":"2023-01-16T09:35:19.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0.96,"hasTruncateMarker":false,"authors":[],"frontMatter":{"sidebar_position":2},"prevItem":{"title":"Manage Docs Versions","permalink":"/project-temporal/blog/tutorial-extras/manage-docs-versions"},"nextItem":{"title":"Overview","permalink":"/project-temporal/blog/Overview"}},"content":"Let\'s translate `docs/intro.md` to French.\\n\\n## Configure i18n\\n\\nModify `docusaurus.config.js` to add support for the `fr` locale:\\n\\n```js title=\\"docusaurus.config.js\\"\\nmodule.exports = {\\n  i18n: {\\n    defaultLocale: \'en\',\\n    locales: [\'en\', \'fr\'],\\n  },\\n};\\n```\\n\\n## Translate a doc\\n\\nCopy the `docs/intro.md` file to the `i18n/fr` folder:\\n\\n```bash\\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\\n\\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\\n```\\n\\nTranslate `i18n/fr/docusaurus-plugin-content-docs/current/intro.md` in French.\\n\\n## Start your localized site\\n\\nStart your site on the French locale:\\n\\n```bash\\nnpm run start -- --locale fr\\n```\\n\\nYour localized site is accessible at [http://localhost:3000/fr/](http://localhost:3000/fr/) and the `Getting Started` page is translated.\\n\\n:::caution\\n\\nIn development, you can only use one locale at a same time.\\n\\n:::\\n\\n## Add a Locale Dropdown\\n\\nTo navigate seamlessly across languages, add a locale dropdown.\\n\\nModify the `docusaurus.config.js` file:\\n\\n```js title=\\"docusaurus.config.js\\"\\nmodule.exports = {\\n  themeConfig: {\\n    navbar: {\\n      items: [\\n        // highlight-start\\n        {\\n          type: \'localeDropdown\',\\n        },\\n        // highlight-end\\n      ],\\n    },\\n  },\\n};\\n```\\n\\nThe locale dropdown now appears in your navbar:\\n\\n![Locale Dropdown](./img/localeDropdown.png)\\n\\n## Build your localized site\\n\\nBuild your site for a specific locale:\\n\\n```bash\\nnpm run build -- --locale fr\\n```\\n\\nOr build your site to include all the locales at once:\\n\\n```bash\\nnpm run build\\n```"},{"id":"Overview","metadata":{"permalink":"/project-temporal/blog/Overview","source":"@site/blog/2023-01-16-welcome/index.md","title":"Overview","description":"","date":"2023-01-16T00:00:00.000Z","formattedDate":"January 16, 2023","tags":[],"readingTime":0,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Overview","title":"Overview"},"prevItem":{"title":"Translate your site","permalink":"/project-temporal/blog/tutorial-extras/translate-your-site"},"nextItem":{"title":"What is Whisper","permalink":"/project-temporal/blog/about-whisper"}},"content":""},{"id":"about-whisper","metadata":{"permalink":"/project-temporal/blog/about-whisper","source":"@site/blog/2023-01-15-about-whisper.md","title":"What is Whisper","description":"OpenAI\'s Whisper is a cutting-edge natural language model that allows developers to understand and generate human-like speech. It is based on a transformer architecture and pre-trained on a massive amount of data, making it one of the most advanced models for natural language processing.","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[],"readingTime":1.645,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"about-whisper","title":"What is Whisper"},"prevItem":{"title":"Overview","permalink":"/project-temporal/blog/Overview"},"nextItem":{"title":"Project Potential","permalink":"/project-temporal/blog/Project Potential"}},"content":"OpenAI\'s Whisper is a cutting-edge natural language model that allows developers to understand and generate human-like speech. It is based on a transformer architecture and pre-trained on a massive amount of data, making it one of the most advanced models for natural language processing.\\n\\n![How Data works](https://raw.githubusercontent.com/openai/whisper/main/approach.png)\\n\\n\\nOne of the key benefits of using OpenAI\'s Whisper is its ability to understand and generate a wide range of human speech, including different accents and dialects. This makes it a powerful tool for a variety of applications, such as chatbots, voice assistants, and transcription services.\\n\\nAnother major benefit of using Whisper is its ability to handle a large amount of data and generate high-quality text. Whisper is pre-trained on a massive amount of data, which allows it to generate coherent and fluent text, even when given a small amount of input. This makes it a powerful tool for natural language generation tasks, such as summarization, question answering and language translation.\\n\\nAdditionally, Whisper can be easily integrated into a wide range of applications and platforms, making it a versatile tool for developers. OpenAI\'s API allows developers to access Whisper\'s capabilities with minimal setup, enabling them to focus on building their applications rather than training and maintaining their own models.\\n\\nIn contrast, developing a natural language model from scratch can be a daunting task, requiring significant resources in terms of data, computing power, and expertise. By using OpenAI\'s Whisper, developers can save time and money while still having access to state-of-the-art natural language processing capabilities.\\n\\nIn summary, OpenAI\'s Whisper is a powerful and versatile natural language model that can be used to understand and generate human-like speech. It has several benefits, such as the ability to handle a large amount of data, generating high-quality text, and easy integration into a wide range of applications and platforms. Using OpenAI\'s Whisper rather than developing a natural language model from scratch can save time and money while still having access to state-of-the-art natural language processing capabilities."},{"id":"Project Potential","metadata":{"permalink":"/project-temporal/blog/Project Potential","source":"@site/blog/2023-01-15-project-ideas.md","title":"Project Potential","description":"Project Temporal is a research project aimed at developing new techniques for dealing with twitch bots and audio. Some possible projects that could be built using the research from Project Temporal","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[],"readingTime":2.64,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"Project Potential","title":"Project Potential"},"prevItem":{"title":"What is Whisper","permalink":"/project-temporal/blog/about-whisper"},"nextItem":{"title":"Samantha Bot","permalink":"/project-temporal/blog/Samantha Bot"}},"content":"Project Temporal is a research project aimed at developing new techniques for dealing with twitch bots and audio. Some possible projects that could be built using the research from Project Temporal\\n\x3c!--truncate--\x3e\\n# Chat bot \\nA Twitch bot using audio only commands from the streamer could allow the streamer to control certain aspects of their stream without needing to use their keyboard or mouse. This could be useful for streamers who want to keep their hands free for other tasks, such as playing a game or drawing.\\n\\nOne possible implementation of this bot would be to use vocal range matching to match the voice of the streamer. This could involve analyzing the streamer\'s voice in real-time and comparing it to a pre-recorded sample of their voice. If a match is detected, the bot could then execute the corresponding command.\\n\\nFor example, the streamer could say \\"start music\\" or \\"stop music\\" to control the background music during the stream. Or \\"start countdown\\" to start a countdown timer on the screen.\\n\\nAnother example could be using different pitch and tone of the streamer\'s voice to control the volume of the stream or other settings.\\n\\n## Chat bot for people with disabilities\\n\\nA Twitch bot that uses audio only commands can help make the streaming experience more accessible for streamers who may have difficulty using a keyboard or mouse due to a physical disability or other condition. By allowing streamers to control certain aspects of their stream using just their voice, this bot can help to reduce the physical strain of streaming and make it more accessible for a wider range of people.\\n\\nFor example, the bot could be used to allow the streamer update counters, change the game/title, and other basic controls. This would make the streaming process less cumbersome for streamers who may have difficulty using a keyboard or mouse.\\n\\nSo, by using an audio-only bot, Twitch streamers with disabilities or conditions that make it difficult to use a keyboard or mouse can still stream and interact with their audience in a more accessible way. Twitch\'s mission to make the website useable for everyone, that can be further enhanced by this kind of bot, and it could be a great addition to Twitch\'s current accessibility features.\\n\\n\\n# Event Bot \\nA Twitch bot that uses audio only to act on events from a Twitch stream, such as specific words said by the streamer, could be a useful tool for streamers who want to interact with their audience in a more dynamic and engaging way. This could be done by having the bot listen for specific keywords or phrases in the stream\'s audio and then performing an action based on those keywords.\\n\\nAnother example could be if the streamer says a specific word or phrase in the stream, the bot could automatically execute a command such as starting a poll, displaying a message on the screen, or triggering a sound effect. This could be used to enhance the overall viewing experience for the audience.\\n\\nThis kind of bot could be built using a combination of technologies such as speech recognition, natural language processing, and real-time audio processing, found in OpenAi\'s (Whisper)[https://openai.com/blog/whisper/]"},{"id":"Samantha Bot","metadata":{"permalink":"/project-temporal/blog/Samantha Bot","source":"@site/blog/2023-01-15-Samantha/index.md","title":"Samantha Bot","description":"Samantha is a Twitch bot that utilizes research from Project Temporal to monitor audio from a Twitch stream for the use of profanity. It is built using ffmpeg for audio processing, golang for the backend, and python for the interface. The bot counts the number of times the word \\"fuck\\" is used in the stream\'s audio.","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[],"readingTime":3.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Samantha Bot","title":"Samantha Bot"},"prevItem":{"title":"Project Potential","permalink":"/project-temporal/blog/Project Potential"}},"content":"Samantha is a Twitch bot that utilizes research from Project Temporal to monitor audio from a Twitch stream for the use of profanity. It is built using ffmpeg for audio processing, golang for the backend, and python for the interface. The bot counts the number of times the word \\"fuck\\" is used in the stream\'s audio.\\n\\n# what is ffmpeg \\n![audio-wave](futuristic-sound-wave-vector.jpg)\\nFFmpeg is a free, open-source, command-line software that can be used to record, convert, and stream audio and video. It supports a wide variety of codecs and file formats, and is commonly used for video encoding, decoding, and manipulation.\\n\\n<code>\\nffmpeg -i \\"https://usher.ttvnw.net/api/channel/hls/...\\" -vn -c:a aac -b:a 128k -segment_time 10 -f segment audio/output_%03d.aac\\n</code>\\n\\nThis command tells ffmpeg to take the input from the specified m3u8 URL, to ignore any video (-vn), and to copy the audio codec into 30-second segments, and to save each segment to a separate file using the %03d pattern..\\n\\n# How does it get the words?\\nOpenAI\'s Whisper is a high-quality voice synthesis model that can be used to generate natural-sounding speech. It is based on the Transformer architecture and can be fine-tuned on a specific speaker\'s voice, making it capable of generating speech in different accents and languages.\\n\\nIn the context of a project, Whisper can be used to loop through an array of files that are added to a directory. The process would involve first converting the text data in the files to speech using Whisper, and then updating a counter in a local file through a post request. The looping mechanism is implemented using python that continuously monitors the directory for new files and processes them as they are added.\\n\\nThe time of the segments from the ffmpeg script can be fine used to  allow for real-time conversion of text to speech or just normal processing over time as new files are added to the directory, allowing for automatic processing without human intervention.\\n\\nIt\'s worth noting that OpenAI API\'s including Whisper are not public anymore, you need to apply for access, pay for usage or run stright from the ground up.\\n\\n# Golang? Why?\\n![go bot](001-2736037818.gif)\\nGo, is a programming language developed by Google that is often used for building backend systems. In the context of this project its a Twitch bot to send updates to the Twitch chat when a specific command is called. Golang is also being used to process API calls to keep track of the counter allowing for max efficiency.\\n\\nThe Go programming language also provides built-in support for concurrency, which allows multiple tasks to be executed simultaneously. This can be useful in a Twitch bot & the api caller because it allows for the processing of multiple commands or requests at the same time, without slowing down the overall performance of the bot.\\n\\nAdditionally, Golang is a compiled language which makes it a good choice for performance-sensitive applications, and it also provides good support for cross-compilation, making it easy to deploy the bot on different platforms.\\n\\nIn summary, Golang is a suitable choice for building the backend of a Twitch bot because it provides robust support for handling network connections, concurrency, and performance-sensitive applications. It\'s well suited to handle the api calls and updates to the Twitch chat when the command `?fbomb` is called.\\n\\n# Summary \\n\\n![overview](overview.png)\\n\\nThe project architecture for the Twitch bot that uses OpenAI\'s Whisper, ffmpeg and golang, includes utilizing Whisper for converting text to speech, ffmpeg for extracting audio from a m3u8 stream and splitting it into 30-second segments, and golang for the backend to process API calls, and sending updates to the Twitch chat when the command `?fbomb` is called."}]}')}}]);